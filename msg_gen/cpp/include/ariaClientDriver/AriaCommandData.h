/* Auto-generated by genmsg_cpp for file /home/oscar/ros_workspace2/ariaClientDriver/msg/AriaCommandData.msg */
#ifndef ARIACLIENTDRIVER_MESSAGE_ARIACOMMANDDATA_H
#define ARIACLIENTDRIVER_MESSAGE_ARIACOMMANDDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace ariaClientDriver
{
template <class ContainerAllocator>
struct AriaCommandData_ {
  typedef AriaCommandData_<ContainerAllocator> Type;

  AriaCommandData_()
  : header()
  , TransRatio(0.0)
  , RotRatio(0.0)
  , LatRatio(0.0)
  , MaxVel(0.0)
  {
  }

  AriaCommandData_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , TransRatio(0.0)
  , RotRatio(0.0)
  , LatRatio(0.0)
  , MaxVel(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef double _TransRatio_type;
  double TransRatio;

  typedef double _RotRatio_type;
  double RotRatio;

  typedef double _LatRatio_type;
  double LatRatio;

  typedef double _MaxVel_type;
  double MaxVel;


  typedef boost::shared_ptr< ::ariaClientDriver::AriaCommandData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ariaClientDriver::AriaCommandData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AriaCommandData
typedef  ::ariaClientDriver::AriaCommandData_<std::allocator<void> > AriaCommandData;

typedef boost::shared_ptr< ::ariaClientDriver::AriaCommandData> AriaCommandDataPtr;
typedef boost::shared_ptr< ::ariaClientDriver::AriaCommandData const> AriaCommandDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ariaClientDriver::AriaCommandData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ariaClientDriver::AriaCommandData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ariaClientDriver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ariaClientDriver::AriaCommandData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ariaClientDriver::AriaCommandData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ariaClientDriver::AriaCommandData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "21b14ee76100ef35375a686e47103895";
  }

  static const char* value(const  ::ariaClientDriver::AriaCommandData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x21b14ee76100ef35ULL;
  static const uint64_t static_value2 = 0x375a686e47103895ULL;
};

template<class ContainerAllocator>
struct DataType< ::ariaClientDriver::AriaCommandData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ariaClientDriver/AriaCommandData";
  }

  static const char* value(const  ::ariaClientDriver::AriaCommandData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ariaClientDriver::AriaCommandData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# this packs the sequence the robot identity an the time stamp\n\
Header header\n\
\n\
# Navigation data of aria robots\n\
float64  TransRatio\n\
float64  RotRatio\n\
float64  LatRatio\n\
float64  MaxVel\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::ariaClientDriver::AriaCommandData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::ariaClientDriver::AriaCommandData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::ariaClientDriver::AriaCommandData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ariaClientDriver::AriaCommandData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.TransRatio);
    stream.next(m.RotRatio);
    stream.next(m.LatRatio);
    stream.next(m.MaxVel);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AriaCommandData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ariaClientDriver::AriaCommandData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ariaClientDriver::AriaCommandData_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "TransRatio: ";
    Printer<double>::stream(s, indent + "  ", v.TransRatio);
    s << indent << "RotRatio: ";
    Printer<double>::stream(s, indent + "  ", v.RotRatio);
    s << indent << "LatRatio: ";
    Printer<double>::stream(s, indent + "  ", v.LatRatio);
    s << indent << "MaxVel: ";
    Printer<double>::stream(s, indent + "  ", v.MaxVel);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARIACLIENTDRIVER_MESSAGE_ARIACOMMANDDATA_H

