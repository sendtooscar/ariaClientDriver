/* Auto-generated by genmsg_cpp for file /home/oscar/ros_workspace2/ariaClientDriver/msg/AriaNavData.msg */
#ifndef ARIACLIENTDRIVER_MESSAGE_ARIANAVDATA_H
#define ARIACLIENTDRIVER_MESSAGE_ARIANAVDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace ariaClientDriver
{
template <class ContainerAllocator>
struct AriaNavData_ {
  typedef AriaNavData_<ContainerAllocator> Type;

  AriaNavData_()
  : header()
  , Mode()
  , Status()
  , Voltage(0.0)
  , X(0.0)
  , Y(0.0)
  , Th(0.0)
  , Vel(0.0)
  , RotVel(0.0)
  , LatVel(0.0)
  , Temperature(0.0)
  {
  }

  AriaNavData_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , Mode(_alloc)
  , Status(_alloc)
  , Voltage(0.0)
  , X(0.0)
  , Y(0.0)
  , Th(0.0)
  , Vel(0.0)
  , RotVel(0.0)
  , LatVel(0.0)
  , Temperature(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Mode_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Mode;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Status_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Status;

  typedef double _Voltage_type;
  double Voltage;

  typedef double _X_type;
  double X;

  typedef double _Y_type;
  double Y;

  typedef double _Th_type;
  double Th;

  typedef double _Vel_type;
  double Vel;

  typedef double _RotVel_type;
  double RotVel;

  typedef double _LatVel_type;
  double LatVel;

  typedef double _Temperature_type;
  double Temperature;


  typedef boost::shared_ptr< ::ariaClientDriver::AriaNavData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ariaClientDriver::AriaNavData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AriaNavData
typedef  ::ariaClientDriver::AriaNavData_<std::allocator<void> > AriaNavData;

typedef boost::shared_ptr< ::ariaClientDriver::AriaNavData> AriaNavDataPtr;
typedef boost::shared_ptr< ::ariaClientDriver::AriaNavData const> AriaNavDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ariaClientDriver::AriaNavData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ariaClientDriver::AriaNavData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ariaClientDriver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ariaClientDriver::AriaNavData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ariaClientDriver::AriaNavData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ariaClientDriver::AriaNavData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eb91038829cadc96ba2281497c9ac46f";
  }

  static const char* value(const  ::ariaClientDriver::AriaNavData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeb91038829cadc96ULL;
  static const uint64_t static_value2 = 0xba2281497c9ac46fULL;
};

template<class ContainerAllocator>
struct DataType< ::ariaClientDriver::AriaNavData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ariaClientDriver/AriaNavData";
  }

  static const char* value(const  ::ariaClientDriver::AriaNavData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ariaClientDriver::AriaNavData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
# this packs the sequence the robot identity an the time stamp\n\
Header header\n\
\n\
# Navigation data of aria robots\n\
string	 Mode\n\
string	 Status\n\
float64  Voltage\n\
float64  X\n\
float64  Y\n\
float64  Th\n\
float64  Vel\n\
float64  RotVel\n\
float64  LatVel\n\
float64  Temperature\n\
\n\
#add localization score information\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::ariaClientDriver::AriaNavData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::ariaClientDriver::AriaNavData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::ariaClientDriver::AriaNavData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ariaClientDriver::AriaNavData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.Mode);
    stream.next(m.Status);
    stream.next(m.Voltage);
    stream.next(m.X);
    stream.next(m.Y);
    stream.next(m.Th);
    stream.next(m.Vel);
    stream.next(m.RotVel);
    stream.next(m.LatVel);
    stream.next(m.Temperature);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AriaNavData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ariaClientDriver::AriaNavData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ariaClientDriver::AriaNavData_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Mode);
    s << indent << "Status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Status);
    s << indent << "Voltage: ";
    Printer<double>::stream(s, indent + "  ", v.Voltage);
    s << indent << "X: ";
    Printer<double>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<double>::stream(s, indent + "  ", v.Y);
    s << indent << "Th: ";
    Printer<double>::stream(s, indent + "  ", v.Th);
    s << indent << "Vel: ";
    Printer<double>::stream(s, indent + "  ", v.Vel);
    s << indent << "RotVel: ";
    Printer<double>::stream(s, indent + "  ", v.RotVel);
    s << indent << "LatVel: ";
    Printer<double>::stream(s, indent + "  ", v.LatVel);
    s << indent << "Temperature: ";
    Printer<double>::stream(s, indent + "  ", v.Temperature);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARIACLIENTDRIVER_MESSAGE_ARIANAVDATA_H

