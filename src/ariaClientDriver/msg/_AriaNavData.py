"""autogenerated by genpy from ariaClientDriver/AriaNavData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class AriaNavData(genpy.Message):
  _md5sum = "eb91038829cadc96ba2281497c9ac46f"
  _type = "ariaClientDriver/AriaNavData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """
# this packs the sequence the robot identity an the time stamp
Header header

# Navigation data of aria robots
string	 Mode
string	 Status
float64  Voltage
float64  X
float64  Y
float64  Th
float64  Vel
float64  RotVel
float64  LatVel
float64  Temperature

#add localization score information
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','Mode','Status','Voltage','X','Y','Th','Vel','RotVel','LatVel','Temperature']
  _slot_types = ['std_msgs/Header','string','string','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Mode,Status,Voltage,X,Y,Th,Vel,RotVel,LatVel,Temperature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AriaNavData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Mode is None:
        self.Mode = ''
      if self.Status is None:
        self.Status = ''
      if self.Voltage is None:
        self.Voltage = 0.
      if self.X is None:
        self.X = 0.
      if self.Y is None:
        self.Y = 0.
      if self.Th is None:
        self.Th = 0.
      if self.Vel is None:
        self.Vel = 0.
      if self.RotVel is None:
        self.RotVel = 0.
      if self.LatVel is None:
        self.LatVel = 0.
      if self.Temperature is None:
        self.Temperature = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.Mode = ''
      self.Status = ''
      self.Voltage = 0.
      self.X = 0.
      self.Y = 0.
      self.Th = 0.
      self.Vel = 0.
      self.RotVel = 0.
      self.LatVel = 0.
      self.Temperature = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.Mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.Status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8d.pack(_x.Voltage, _x.X, _x.Y, _x.Th, _x.Vel, _x.RotVel, _x.LatVel, _x.Temperature))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Mode = str[start:end].decode('utf-8')
      else:
        self.Mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Status = str[start:end].decode('utf-8')
      else:
        self.Status = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.Voltage, _x.X, _x.Y, _x.Th, _x.Vel, _x.RotVel, _x.LatVel, _x.Temperature,) = _struct_8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.Mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.Status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8d.pack(_x.Voltage, _x.X, _x.Y, _x.Th, _x.Vel, _x.RotVel, _x.LatVel, _x.Temperature))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Mode = str[start:end].decode('utf-8')
      else:
        self.Mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Status = str[start:end].decode('utf-8')
      else:
        self.Status = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.Voltage, _x.X, _x.Y, _x.Th, _x.Vel, _x.RotVel, _x.LatVel, _x.Temperature,) = _struct_8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_8d = struct.Struct("<8d")
